Git Commands

git init
  Initializes a repository
git status
  Checks current state of project
git add "FileName"
  Adds file to staging area so it can be tracked
git add -A .
  Everything in and beneath director is added where the dot stands for the current directory
  -A ensures even file deletions are included
git commit -m "Comment"
  Store our staged changes with a message saying what we changed
git log
  Get all the changes we've committed so far
git remote add origin "Name of Remote Repo"
  Adds a remote repository
git push -u "remote name" "name"
  tells gut where to put our commits, -u tells git to remember the parameters
git pull "remote name" "name"
  check for changes on repository and pull down any new changes
git stash
  stash your changes
git stach apply
  re-apply your changes after you pull
git diff HEAD
  Looks at differences of most recent commit
git diff --staged
  Look at differences in staging area
git reset
  Unstage files
git checkout -- <target>
  Changes file back how it was before last commit
git branch  "branch name"
  creates a new branch
git checkout "branch name"
  switches you to branch
git rm
  removes files
git merge
  merges files
git branch -d "name"
  deletes branch

Git Keywords
  Directory
    A Folder used for storing multiple files
  Repository
    A directory where Git has been initialized to start version controlling files
  Untracked
    If a file is untracked that means git sees it as a new file
  Staged
    Files are ready to be committed
  Unstaged
    Files with changes that have not been prepared to be committed
  Deleted
    File has been deleted and is waiting to be removed by git
  Staging Area
    A Place where we can group files together before we commit them
  Commit
    a snapshot of our repository
  HEAD
    pointer that holds your position within all your different commits, default HEAD
    points to your most recent commit
  Branches
  Just like TFS seperate file locations
