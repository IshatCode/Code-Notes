NUL > "filename"
  make a new file

Console.log()
  Anything in () writes to terminal

Variables
  Declared using var followed by name of variable

Strings
  Any Value surrounded by quotes, can be single or double

Objects
  Literal notation creates a single object, uses curly bracketa and default properties are
  defined wihin brackets using property:value notation
  var wes = {
    // add properties to this object!
    job: "programmer",
    married: false

};

  Constructor notation
  Defines an object using fuction keyword, use new keyword
  function Person(job, married) {
    this.job = job;
    this.married = married;
}
  var nate = new Person("Pharmacist",true);

Calling Methods inside constructos/objects
  var Wes = {
    job: "programmer",
    married: false,
    speak: function(message) {
       console.log(message);
    }
};

.hasOwnProperty
  lets us know if an object has a particular property

Adding method to object
  obj.newMethod = function(){};

Prototype
  Teaches all instances of the class the method
  class.prototype.newMethod = function(){};
  Adding functionality to a prototype adds into to any object that inherits that prototype

Inheritance
  To inherit from one class to another you must set the prototype
  class1.prototype = new class2();

Private variables
  Use var inside a object, have a method return a private variable to have access to it

JSON
  JSON.stringify(object)
    converts object into json encoded string

  JSON.parse(jsonString)
    parses string back into object

Constructor
  Start with Capital Letters
    function() E() {};

    e = new E(); -Must have new just like in C#

Closures
  Allow you to access scoped variables after functions complete
    using var i etc will close off the variable and not pop it off stack when function completes

That
  use when using this inside functions to avoid bugs
  this = that
