Factory pattern, A factory creates objects.
We implement the factory design pattern in a C# program. With this pattern,
we develop an abstraction that isolates the logic for determining which type of class to create

Design Notes
  The factory design pattern relies on a type hierarchy, classes must all implement an
  interface or derive form a base class.


Example: From Dotnetperls(http://www.dotnetperls.com/factory)

using System;
class Program
{
  abstract class Position
  {
    public abstract string Title {get;}
  }

  class Manager : Position
  {
    public override string Title
    {
      get
      {
        return "Manager";
      }
    }
  }
  
  class Clerk : Position
  {
    public override string Title
    {
      get
      {
        return "Clerk";
      }
    }
  }

  class Programmer : Position
  {
    public override string Title
	  {
	    get
	    {
		    return "Programmer";
	    }
	  }
  }

  static class Factory
  {
    public static Position Get(int id)
    {
      switch(id)
      {
        case 0:
		      return new Manager();
		    case 1:
		    case 2:
		      return new Clerk();
		    case 3:
		    default:
		      return new Programmer();
      }
    }
  }
  static void Main()
  {
  	 for (int i = 0; i <= 3; i++)
  	 {
  	    var position = Factory.Get(i);
  	    Console.WriteLine("Where id = {0}, position = {1} ", i, position.Title);
  	 }
  }
}
